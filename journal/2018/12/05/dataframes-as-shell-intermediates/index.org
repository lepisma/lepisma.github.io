#+TITLE: DataFrames as Shell Intermediates
#+TAGS: programming, org-mode
#+PILE: dropcap:nil

Oilshell blog recently [[http://www.oilshell.org/blog/2018/11/30.html][hinted]] at a possibility of having dataframes in the
language:

#+BEGIN_QUOTE
Data frames may someday be a feature of the Oil language. Why? Because the
output of both ls and ps is a table. (Caveat: this work is far in the future.)
#+END_QUOTE

With the benefit of hindsight, this idea is /really/ useful. More than ~ls~ and ~ps~,
domain specific tools like from, say, [[http://www.speech.sri.com/projects/srilm/][srilm]] IO things which are conceptually
/dataframes/ (an example below).

#+NAME: ngrams
#+BEGIN_SRC shell :exports both :results value table 
  # Counting ngrams in this file
  ngram-count -text index.org -no-sos -no-eos -tolower -order 1 | head
#+END_SRC

#+RESULTS: ngrams
| language.    | 2 |
| org-babel.   | 1 |
| type         | 1 |
| universal    | 1 |
| why?         | 2 |
| conceptually | 2 |
| <s>          | 1 |
| you          | 1 |
| constraints  | 1 |
| i            | 2 |

Of course the idea is not totally universal. There are many popular tools that
return structured data in formats like json, xml, sexps etc., but keeping a
dataframe structure does make sense for many of the core unix and data
processing tools.

Already there are a lot of tools for ingesting tables. A primitive parsing of
shell output to tables is done in org-babel. You can get output of tools that
emit tabular data in org tables and then work on them /a little/ like dataframes:

#+BEGIN_SRC emacs-lisp :var tb=ngrams
  ;; I am using table from the above snippet
  (mapcar #'second tb)
#+END_SRC

#+RESULTS:
| 2 | 1 | 1 | 2 | 2 | 2 | 1 | 1 | 1 | 1 |

Other than this and the usual unix tools, there are a lot of cli tools that
actually work by passing proper /tables/, for example [[https://csvkit.readthedocs.io/en/1.0.3/][csvkit]]. But a move to
dataframes, with type constraints and variable naming, might have some nicer
side effects.
